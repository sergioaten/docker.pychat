name: Build and Deploy to Cloud Run

on:
  push:
    branches: ["dev"]

env:
  PROJECT_ID: jenkins-project-388812 # GCP Project ID
  SERVICE: pychat # Service Name
  REGION: us-central1 # Service Region
  APP_SERVICE_ACCOUNT: pychat@jenkins-project-388812.iam.gserviceaccount.com # App Service Account
  APP_DIR: app

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.APP_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Environment
        id: setup_env
        run: |
          GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)
          echo "IMAGE=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/dockerimages/${{ env.SERVICE }}:$GITHUB_SHA_SHORT" >> $GITHUB_ENV
          echo $GITHUB_WORKSPACE
          if [[ -d "${{ github.workspace }}/${{ env.APP_DIR }}" ]]; then
            echo "APP_PATH=${{ github.workspace }}/${{ env.APP_DIR }}" >> $GITHUB_ENV
          else
            echo "APP_PATH=${{ github.workspace }}" >> $GITHUB_ENV
          fi

      - name: Google Auth
        id: gcp_auth
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CLOUDRUN_JSON_KEY }}"

      - name: Login to Google Artifact Registry
        id: repo_auth
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_CLOUDRUN_JSON_KEY }}

      - name: Build and Push Container
        id: build_push
        run: |
          docker build -t "${{ env.IMAGE }}" ./
          docker push "${{ env.IMAGE }}"

      - name: Exporting PORT from docker image to env variable
        id: get_container_port
        run: |
          echo "PORT=$(docker inspect "${{ env.IMAGE }}" \
          | jq -r '.[0].Config.ExposedPorts | keys[] | split("/")[0]')" >> $GITHUB_ENV

      - name: Prepare pychat.yml
        id: prepare_pychat_yaml
        run: |
          sed -i 's|## SERVICE ##|${{ env.SERVICE }}|g' ${{ env.APP_PATH }}/conf/pychat.yml
          sed -i 's|## REGION ##|${{ env.REGION }}|g' ${{ env.APP_PATH }}/conf/pychat.yml
          sed -i 's|## SERVICEACC ##|${{ env.APP_SERVICE_ACCOUNT }}|g' ${{ env.APP_PATH }}/conf/pychat.yml
          sed -i 's|## IMAGE ##|${{ env.IMAGE }}|g' ${{ env.APP_PATH }}/conf/pychat.yml
          sed -i 's|## PORT ##|${{ env.PORT }}|g' ${{ env.APP_PATH }}/conf/pychat.yml

      - name: Convert YAML Config file to JSON
        id: yaml_to_json
        run: |
          json_output=$(yq eval -j -o=json "${{ env.APP_PATH }}/conf/pychat.yml")
          echo $json_output > pychat.json

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          metadata: ${{ env.APP_PATH }}/pychat.json

      - name: Show Output Service URL
        run: |
          echo ${{ steps.deploy.outputs.url }}

      - name: Curl test application
        id: curl_test
        run: |
          responsecode=$(curl -s -o /dev/null -w '%{http_code}' ${{ steps.deploy.outputs.url }})
          if [[ $responsecode == 200 ]]; then
            echo "Test passed"
          else
            echo "Test failed"
            exit 1
          fi

      - name: Microsoft Teams Notification
        id: msteams_notification
        uses: sergioaten/msteams-notifications@v0.1-beta
        if: always()
        with:
          webhook: ${{ secrets.MSTEAMS_WEBHOOK_PYCHAT }}
          steps: ${{ toJson(steps) }}
          factsTitle: <h1><strong>App details</h1></strong>
          facts: |
            - Aplication name: ${{ env.SERVICE }}
            - Appliaction port: ${{ env.PORT }}
            - Application region: ${{ env.REGION }}
          buttons: |
            - name: 'View commit'
              type: 'OpenUri'
              targets:
                - os: 'default'
                  uri: 'https://github.com/sergioaten/docker.pychat/commit/${{ github.sha }}'
            - name: 'Open App in browser'
              type: 'OpenUri'
              targets:
                - os: 'default'
                  uri: '${{ steps.deploy.outputs.url }}'
