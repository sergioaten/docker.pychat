name: Build and Deploy to Cloud Run

on:
  push:
    branches: ["dev"]

env:
  PROJECT_ID: jenkins-project-388812 # GCP Project ID
  SERVICE: pychat # Service Name
  REGION: us-central1 # Service Region
  APP_SERVICE_ACCOUNT: pychat@jenkins-project-388812.iam.gserviceaccount.com # App Service Account

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Environment
        id: setup_env
        run: |
          GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)
          echo "IMAGE=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/dockerimages/${{ env.SERVICE }}:$GITHUB_SHA_SHORT" >> $GITHUB_ENV

      - name: Google Auth
        id: gcp_auth
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CLOUDRUN_JSON_KEY }}"

      - name: Login to Google Artifact Registry
        id: repo_auth
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_CLOUDRUN_JSON_KEY }}

      - name: Build and Push Container
        id: build_push
        run: |
          docker build -t "${{ env.IMAGE }}" ./
          docker push "${{ env.IMAGE }}"

      - name: Exporting PORT from docker image to env variable
        id: get_container_port
        run: |
          echo "PORT=$(docker inspect "${{ env.IMAGE }}" \
          | jq -r '.[0].Config.ExposedPorts | keys[] | split("/")[0]')" >> $GITHUB_ENV

      - name: Prepare pychat.yml
        id: prepare_pychat_yaml
        run: |
          sed -i 's|## SERVICE ##|${{ env.SERVICE }}|g' ${{ github.workspace }}/pychat.yml
          sed -i 's|## REGION ##|${{ env.REGION }}|g' ${{ github.workspace }}/pychat.yml
          sed -i 's|## SERVICEACC ##|${{ env.APP_SERVICE_ACCOUNT }}|g' ${{ github.workspace }}/pychat.yml
          sed -i 's|## IMAGE ##|${{ env.IMAGE }}|g' ${{ github.workspace }}/pychat.yml
          sed -i 's|## PORT ##|${{ env.PORT }}|g' ${{ github.workspace }}/pychat.yml

      - name: Convert YAML Config file to JSON
        id: yaml_to_json
        run: |
          json_output=$(yq eval -j -o=json "${{ github.workspace }}/pychat.yml")
          echo $json_output > pychat.json

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          metadata: ${{ github.workspace }}/pychat.json

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Microsoft Teams Notification
        id: ms_teams_notification
        if: always()
        run: |
          json_data='${{ toJson(steps) }}'
          formatted_data=$(echo $json_data | jq -jr 'to_entries[] | { "name": .key, "value": .value.outcome }' \
          | sed 's/}{/},{/g' \
          | sed 's/} {/},{/g' | sed 's/"success"/"✅ OK"/g' \
          | sed 's/"failure"/"❌ FAIL"/g')

          cat << EOF > tmp_message.json
            {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "$(if [[ ${{ job.status }} == 'success' ]]; then echo '00FF00'; else echo 'FF0000'; fi)",
              "title": "${{github.workflow}} > ${{ github.ref_name }} (${{github.run_number}})",
              "sections": [
                {
                  "activityTitle": "Changelog",
                  "activitySubtitle": "${{ github.event.head_commit.message }}"
                },
                {
                  "text": "<h1><strong>App details</strong></h1>",
                  "facts": [
                    {
                    "name": "Aplication name",
                    "value": "${{ env.SERVICE }}"
                    },
                    {
                    "name": "Application port",
                    "value": "${{ env.PORT }}"
                    },
                    {
                    "name": "Application region",
                    "value": "${{ env.REGION }}"
                    }                    
                  ],
                  "markdown": true
                },
                {
                  "text": "<h1><strong>Pipeline Steps</strong></h1>",
                  "facts": [
                    $(echo "$formatted_data")
                  ],
                  "markdown": true
                }
              ],
              "potentialAction": [
                {
                  "@type": "OpenUri",
                  "name": "Open App in browser",
                  "targets": [
                    {
                      "os": "default",
                      "uri": "${{ steps.deploy.outputs.url }}"
                    }
                  ]
                },
                {
                  "@type": "OpenUri",
                  "name": "View commit",
                  "targets": [
                      {
                        "os": "default",
                        "uri": "https://github.com/sergioaten/docker.pychat/commit/${{ github.sha }}"
                      }
                    ]
                  }
                ]
            }
          EOF

          jq '.' "${{ github.workspace }}/tmp_message.json" > "${{ github.workspace }}/message.json"

          # Send Notification
          curl -X POST ${{ secrets.MSTEAMS_WEBHOOK_PYCHAT }} --header 'Content-Type: application/json' -d @message.json
